variables:
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    versionSuffix: release
  ${{ if eq(variables['Build.SourceBranchName'], 'dev') }}:
    versionSuffix: dev
  ${{ if eq(variables['Build.SourceBranchName'], '!alpha') }}:
    versionSuffix: alpha
  ${{ if eq(variables['Build.SourceBranchName'], '!beta') }}:
    versionSuffix: beta

trigger:
  branches:
    include:
    - master
    - dev
    - '!alpha'
    - '!beta'
  paths:
    include:
    - src/*

name: '$(Date:yyyyMMdd).$(Rev:r)[$(BuildID)]'

stages:

- stage: 'Build'
  variables:
    - group: build-vars
    - name: buildConfiguration
      value: Release
    - name: buildPlatform
      value: 'Any CPU'
  jobs:
  - job: 'CompileTools'
    pool:
      name: 'Azure Pipelines'
      vmImage: windows-latest
      demands:
        - msbuild
        - visualstudio

    steps:
      - task: NuGetToolInstaller@1
        displayName: 'Install NuGet'

      - task: NuGetCommand@2
        displayName: 'Restore NuGet References'
        inputs:
          restoreSolution: 'tools/**/*.csproj'
      
      - task: DownloadSecureFile@1
        name: Certificate
        displayName: 'Download strong name certificate'
        inputs:
          secureFile: xarial.snk

      - task: VSBuild@1
        displayName: 'Build Tools projects'
        inputs:
          solution: 'tools/**/*.csproj'
          msbuildArgs: '/p:SignAssembly=true;AssemblyOriginatorKeyFile=$(Certificate.secureFilePath);DelaySign=false;BuildNumber=.$(Build.BuildID)'
          platform: '$(BuildPlatform)'
          configuration: '$(BuildConfiguration)'

      - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
        - task: CopyFiles@2
          displayName: 'Staging tools binaries'
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)/tools/_build'
            Contents: '**\*.*'
            TargetFolder: '$(Build.ArtifactStagingDirectory)/tools'

      - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
        - publish: '$(Build.ArtifactStagingDirectory)/tools'
          displayName: 'Publish tools artifact'
          artifact: 'tools'

  - job: 'SignTools'
    dependsOn: 'CompileTools'
    timeoutInMinutes: 5
    pool:
      name: 'Local'
    steps:
      - checkout: none
      - download: current
        artifact: tools
        patterns: |
          **/Xarial.XCad.Inventor.Tools.StandAloneConnector.dll
      - script: '"%sign% "$(Pipeline.Workspace)\tools" "xCAD Stand-Alone Connector" "https://xcad.net"'
        displayName: 'Signing xCAD Stand-Alone Connector dll file'
      - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
        - task: CopyFiles@2
          displayName: 'Staging signed tools binaries'
          inputs:
            SourceFolder: '$(Pipeline.Workspace)/tools/'
            Contents: '**\*.*'
            TargetFolder: '$(Build.ArtifactStagingDirectory)/tools-signed'

      - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
        - publish: '$(Build.ArtifactStagingDirectory)/tools-signed'
          displayName: 'Publish tools-signed artifact'
          artifact: 'tools-signed'

  - job: 'CompileAndPack'
    dependsOn: 'SignTools'
    pool:
      name: 'Azure Pipelines'
      vmImage: windows-latest
      demands:
        - msbuild
        - visualstudio

    steps:
      - task: NuGetToolInstaller@1
        displayName: 'Install NuGet'

      - task: UseDotNet@2
        displayName: 'Install .NET SDK'
        inputs:
          packageType: 'sdk'
          version: '7.0.101'

      - task: NuGetCommand@2
        displayName: 'Restore NuGet References'
        inputs:
          restoreSolution: '**\*.sln'

      - task: VSBuild@1
        displayName: 'Build test projects'
        inputs:
            solution: 'tests\*.Tests\*.csproj'
            platform: '$(BuildPlatform)'
            configuration: '$(BuildConfiguration)'

      - task: VSTest@2
        displayName: 'Run unit tests'
        inputs:
          testAssemblyVer2: |
            **\$(BuildConfiguration)\**\*tests*.dll
            !**\obj\**
          platform: '$(BuildPlatform)'
          configuration: '$(BuildConfiguration)'

      - task: DownloadSecureFile@1
        name: Certificate
        displayName: 'Download strong name certificate'
        inputs:
          secureFile: xarial.snk

      - task: VSBuild@1
        displayName: 'Build projects'
        inputs:
          solution: 'src/**/*.csproj'
          msbuildArgs: '/p:SignAssembly=true;AssemblyOriginatorKeyFile=$(Certificate.secureFilePath);DelaySign=false;BuildNumber=.$(Build.BuildID)'
          platform: '$(BuildPlatform)'
          configuration: '$(BuildConfiguration)'

      - task: DownloadPipelineArtifact@2
        displayName: 'Downloading tools'
        inputs:
          buildType: 'current'
          artifactName: tools
          targetPath: '$(System.DefaultWorkingDirectory)/tools/_build'

      - task: DownloadPipelineArtifact@2
        displayName: 'Downloading signed tools'
        inputs:
          buildType: 'current'
          artifactName: tools-signed
          targetPath: '$(System.DefaultWorkingDirectory)/tools/_build'

      - ${{ if and(or(eq(variables['Build.SourceBranch'], 'refs/heads/dev'), eq(variables['Build.SourceBranch'], 'refs/heads/!alpha'), eq(variables['Build.SourceBranch'], 'refs/heads/!beta')), ne(variables['Build.Reason'], 'PullRequest')) }}:
        - task: DotNetCoreCLI@2
          displayName: 'Pack $(versionSuffix) versions'
          inputs:
            command: pack
            packagesToPack: 'src/**/*.csproj'
            configurationToPack: $(BuildConfiguration)
            outputDir: $(Build.ArtifactStagingDirectory)/packages/$(versionSuffix)
            nobuild: true
            buildProperties: 'VersionSuffix=$(versionSuffix).$(Build.BuildId)'

      - ${{ if and(eq(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.Reason'], 'PullRequest')) }}:
        - task: DotNetCoreCLI@2
          displayName: 'Pack production versions'
          inputs:
            command: pack
            packagesToPack: 'src/**/*.csproj'
            configurationToPack: $(BuildConfiguration)
            outputDir: $(Build.ArtifactStagingDirectory)/packages/release
            nobuild: true
            buildProperties: 'VersionSuffix='
      
      - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
        - task: CopyFiles@2
          displayName: 'Copy NuGet packages to artifacts folder'
          inputs:
            SourceFolder: '$(system.defaultworkingdirectory)/build'
            Contents: |
              **\*.nupkg
              **\*.snupkg
            TargetFolder: '$(Build.ArtifactStagingDirectory)/packages'
      
      - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
        - publish: '$(Build.ArtifactStagingDirectory)/packages'
          displayName: 'Publish packages artifact'
          artifact: 'packages'

- stage: 'PublishDevNuGetPackage'
  displayName: 'Publish dev NuGet Package to xcad-dev nuget feed'
  dependsOn: 'Build'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: none

    - download: current
      artifact: 'packages'

    - task: NuGetCommand@2
      displayName: 'Push NuGet Packages'
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/packages/dev/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: 'xcad/xcad-dev'

- stage: 'PublishPublicPackage'
  variables:
    - group: build-vars
    - name: packagePath
      value:
  displayName: 'Publish public NuGet packages to nuget.org'
  dependsOn: 'Build'
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/!alpha'), eq(variables['Build.SourceBranch'], 'refs/heads/!beta')), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - deployment:
    pool:
      vmImage: 'windows-latest'
    environment: 'nuget-org'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none

          - download: current
            artifact: 'packages'

          # - task: DownloadSecureFile@1
          #   name: Certificate
          #   displayName: 'Download code signing certificate'
          #   inputs:
          #     secureFile: xarial-code-signing.pfx

          # - task: PowerShell@2
          #   displayName: 'Write the paths to nuget package into variable'
          #   inputs:
          #     targetType: 'inline'
          #     script: |
          #       $packagePath = (Get-ChildItem -Path "$(Pipeline.Workspace)/packages/$(versionSuffix)" -Filter "*.nupkg" | Select-Object  @{Name='QuotedFullPath';Expression={"""$($_.FullName)"""}} | Select-Object -ExpandProperty QuotedFullPath )
          #       Write-Host $packagePath
          #       Write-Host "##vso[task.setvariable variable=packagePath;]$packagePath"

          # nuget packages cannot be signed with ECDSA certificates (only support 3072 bit RSA), while token based (e.g. Yubikey) certificates do not support RSA > 2048
          # - script: |
          #     dotnet nuget sign $(PackagePath) --certificate-path "$(Certificate.secureFilePath)" --certificate-password "$(CODE_SIGN_CERT_PWD)" --timestamper http://timestamp.comodoca.com
          #   displayName: Sign NuGet Packages

          - task: NuGetCommand@2
            displayName: 'Push NuGet Packages'
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/packages/$(versionSuffix)/*.nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'Nuget.org'